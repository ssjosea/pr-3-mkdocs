{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a la web de Jose A. Estrella Tijeras alojada en GitHub Pages","text":"<p>La web est\u00e1 alojada en -&gt; mkdocs.org.</p>"},{"location":"#que-es-mkdocs","title":"\u00bfQu\u00e9 es MkDocs?","text":"<p>MkDocs es un generador de sitios web est\u00e1ticos que nos permite crear de forma sencilla un sitio web para documentar un proyecto. El contenido del sitio web est\u00e1 escrito en texto plano en formato Markdown y se configura con un \u00fanico archivo de configuraci\u00f3n en formato YAML.</p> <p>En esta pr\u00e1ctica vamos a utilizar una imagen Docker que contiene MkDocs y el theme Material.</p> <p>Esta imagen Docker nos permite:</p> <ul> <li>Crear un nuevo proyecto (Comando: <code>new</code>).</li> <li>Crear un servidor de desarrollo local (Comando: <code>serve</code>).</li> <li>Generar la documentaci\u00f3n (Comando: <code>build</code>).</li> <li>Publicar la documentaci\u00f3n en GitHub Pages (Comando: <code>gh-deploy</code>).</li> </ul> <pre><code>Usage: mkdocs [OPTIONS] COMMAND [ARGS]...\n\n  MkDocs - Project documentation with Markdown.\n\nOptions:\n  -V, --version  Show the version and exit.\n  -q, --quiet    Silence warnings\n  -v, --verbose  Enable verbose output\n  -h, --help     Show this message and exit.\n\nCommands:\n  build      Build the MkDocs documentation\n  gh-deploy  Deploy your documentation to GitHub Pages\n  new        Create a new MkDocs project\n  serve      Run the builtin development server\n</code></pre>"},{"location":"#comandos","title":"Comandos","text":""},{"location":"#comando-new","title":"Comando: <code>new</code>","text":"<p>Crea la estructura de archivos del proyecto MkDocs podemos hacer uso del comando new, como se muestra en el siguiente ejemplo.</p> <pre><code>docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material new .\n</code></pre>"},{"location":"#comando-serve","title":"Comando: <code>serve</code>","text":"<p>Crea el contenedor desde el directorio principal del proyecto con un volumen de tipo bind mount entre nuestra m\u00e1quina y el contenedor Docker.</p> <p>Una vez iniciado el contenedor podemos acceder a la URL http://localhost:8000 desde un navegador web para ver el estado actual del sitio web que estamos creando.</p> <pre><code>docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material\n</code></pre>"},{"location":"#comando-build","title":"Comando: <code>build</code>","text":"<p>Tambi\u00e9n es posible generar directamente el sitio web sin tener que iniciar un servidor local de desarrollo. Para generar el sitio web autom\u00e1ticamente podemos ejecutar el siguiente comando:</p> <pre><code>docker run --rm -it -v \"$PWD\":/docs squidfunk/mkdocs-material build\n</code></pre>"},{"location":"#comandogh-deploy","title":"Comando:<code>gh-deploy</code>","text":"<p>Es posible publicar la el sitio web en GitHub Pages con el siguiente comando:</p> <pre><code>docker run --rm -it -v ~/.ssh:/root/.ssh -v \"$PWD\":/docs squidfunk/mkdocs-material gh-deploy\n</code></pre>"},{"location":"about/","title":"Jose A. Estrella Tijeras - Administrador de sistemas inform\u00e1ticos en red","text":""},{"location":"about/#un-poco-sobre-mi","title":"Un poco sobre mi","text":"<p>Durante mis estudios en administraci\u00f3n de sistemas de informaci\u00f3n de red, obtuve una s\u00f3lida formaci\u00f3n en el dise\u00f1o, implementaci\u00f3n y administraci\u00f3n de redes y sistemas de informaci\u00f3n. Ha aprendido a mejorar la infraestructura de la red y garantizar que la informaci\u00f3n est\u00e9 disponible y segura. Tambi\u00e9n ha desarrollado habilidades en la resoluci\u00f3n de problemas t\u00e9cnicos y la toma de decisiones estrat\u00e9gicas para mejorar la eficiencia y el rendimiento del sistema.</p> <p>Estoy listo para aplicar mis conocimientos y habilidades en el rol de administrador de sistemas y continuar mi desarrollo profesional en este campo. Me considero una persona proactiva, autodirigida y con gran capacidad de adaptaci\u00f3n. Me gusta trabajar en equipo y siempre estoy dispuesto a ayudar a mis compa\u00f1eros y resolver problemas juntos. Creo que estas habilidades ser\u00edan un gran activo para cualquier organizaci\u00f3n y estoy seguro de que pueden ser muy beneficiosas para cualquier equipo que necesite una persona altamente calificada y motivada. Adem\u00e1s, mi habilidad para usar el idioma ingl\u00e9s me ha permitido mejorar mi trabajo en equipo y mis habilidades para resolver problemas.</p>"},{"location":"about/#informacion","title":"Informaci\u00f3n","text":"<p>Puedes encontrarme tanto en <code>GitHub</code> como en <code>Linkedin</code>.</p>"},{"location":"practica-07/","title":"Ejercicio 7 - Pila LAMP en dos niveles","text":""},{"location":"practica-07/#jose-a-estrella-tijeras","title":"Jose A. Estrella Tijeras","text":"<p>En esta practica vamos a implemententar la pila web LAMP en 2 instancias AWS en la ultima versi\u00f3n de Ubuntu Server</p> <p>La arquitectura estar\u00e1 formada por:</p> <ul> <li>Una capa de front-end, formada por un servidor web con Apache HTTP Server.</li> <li>Una capa de back-end, formada por un servidor MySQL.</li> </ul> <p></p> <p>Contenidos del repositorio: - <code>ansible</code>: Scripts en ansible (.yml) -&gt; Directorios organizados en back; para la instalaci\u00f3n de la instancia Back-End y front para la instancia Front-End.     - <code>back</code>         - <code>install_backend</code>: Instalaci\u00f3n de MySQL y configuraci\u00f3n de MySQL Server para aceptar conexiones desde todas la interfaces de red         - <code>deploy_backend</code>: Instalaci\u00f3n de Python y modulo PyMySQL. Creaci\u00f3n de una base de datos y un usuario y pila LAMP.     - <code>front</code>         - <code>install_frontend</code>: Instalaci\u00f3n Apache y librerias de PHP.         - <code>deploy_frontend</code>: Instalaci\u00f3n pila LAMP y cambios en las variables del fichero /var/www/html/config.php. Cambiamos las propiedades del fichero /etc/apache2/mods-enabled/dir.conf.</p> <ul> <li> <p><code>scripts</code>: Scripts en bash (.sh) -&gt; Instalaci\u00f3n de las instancias Back-End y  Front-End .</p> </li> <li> <p><code>\u00ecnstall_cerbot</code>: Script de Ansible para la instalaci\u00f3n del certificado Cerbot.</p> </li> <li> <p><code>inventario</code>: Inventario de Ansible con las configuraciones de los 2 hosts (Front-End y backend) con sus IPs p\u00fablicas y configuraci\u00f3n de usuario y ssh.</p> </li> <li> <p><code>main.yml</code>: Playbook principal donde se ordena que se ejecuten el resto de jugadas por orden.</p> </li> </ul> <p>Configuraci\u00f3n de reglas de entrada de AWS:</p> <ul> <li>Front-End:<ul> <li>Puertos habilitados:<ul> <li>HTTP: 80</li> <li>HTTPS: 443</li> <li>SSH: 22</li> </ul> </li> </ul> </li> </ul> <p> - Back-End:      - Puertos habilitados:          - HTTP: 80         - HTTPS: 443         - SSH: 22         - MySQL: 3306</p> <p></p>"},{"location":"practica-09/","title":"Ejercicio 9 - Implantaci\u00f3n de Wordpress en Amazon Web Services (AWS) sobre la pila LAMP en tres fases","text":""},{"location":"practica-09/#jose-a-estrella-tijeras","title":"Jose A. Estrella Tijeras","text":"<p>Para esta pr\u00e1ctica el objetivo ser\u00e1 implementar WordPress en tres fases:</p> <p><code>practica-09          .          \u251c\u2500\u2500 fase-0          \u251c\u2500\u2500 fase-1          \u2514\u2500\u2500 fase-2</code></p>"},{"location":"practica-09/#fase-0","title":"Fase 0:","text":"<ul> <li> <p>1 instancia con la instalaci\u00f3n de WordPress mediante Ansible.</p> </li> <li> <p>Contenido:</p> <ul> <li> <p><code>ansible</code>: </p> <ul> <li><code>deploy_wordpress.yml</code></li> <li><code>install_cerbot.yml</code></li> <li><code>install_lamp.yml</code></li> <li><code>inventario</code></li> <li><code>main.yml</code></li> <li><code>variables.yml</code></li> </ul> </li> <li> <p><code>conf</code></p> <ul> <li><code>000-default.conf</code></li> <li><code>dir.conf</code></li> </ul> </li> <li> <p><code>scripts</code>:</p> <ul> <li><code>deploy_wordpress.sh</code></li> <li><code>install_lamp.sh</code></li> <li><code>variables.sh</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"practica-09/#fase-1","title":"Fase 1:","text":"<ul> <li> <p>2 instancias con la instalaci\u00f3n de WordPress mediante Ansible.</p> <ul> <li>1 Back-End con MySQL para la creaci\u00f3n y la gesti\u00f3n de una base de datos. -&gt; Necesario habilitar el puerto MySQL/Aurora en las reglas de entrada (3306).</li> <li>1 Front-End con Apache donde instalaremos WordPress para mostrar la web.</li> </ul> </li> <li> <p>Contenido:</p> <ul> <li> <p><code>ansible</code>: </p> <ul> <li><code>deploy_backend.yml</code></li> <li><code>deploy_wordpress.yml</code></li> <li><code>install_backend.yml</code></li> <li><code>install_cerbot.yml</code></li> <li><code>install_frontend.yml</code></li> <li><code>inventario</code></li> <li><code>main.yml</code></li> <li><code>variables.yml</code></li> </ul> </li> <li> <p><code>conf</code></p> <ul> <li><code>000-default.conf</code></li> <li><code>dir.conf</code></li> </ul> </li> <li> <p><code>scripts</code>:</p> <ul> <li><code>deploy_backend.sh</code></li> <li><code>deploy_wordpress.sh</code></li> <li><code>install_backend.sh</code></li> <li><code>install_cerbot.sh</code></li> <li><code>install_frontend.sh</code></li> <li><code>variables.sh</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"practica-09/#fase-2","title":"Fase 2:","text":"<ul> <li> <p>5 instancias con la instalaci\u00f3n de WordPress mediante Ansible agrupadas de la siguiente manera:</p> <ul> <li>1 servidor NFS desde el que instalaremos WordPress y lo \"compartiremos\" con los clientes NFS, que ser\u00e1n la cara p\u00fablica de la arquitectura. -&gt; Necesario habilitar el puerto NFS en las reglas de entrada (2048)</li> <li>2 Front-End que a la vez ser\u00e1n clientes NFS que montar\u00e1n el directorio /wordpress del servidor NFS y mostrar\u00e1n la web.</li> <li>1 balanceador de carga que recibir\u00e1 las peticiones HTTPS y las distribuir\u00e1 entre los dos Front-End.</li> <li>1 Back-End con MySQL para la creaci\u00f3n y la gesti\u00f3n de una base de datos -&gt; Necesario habilitar el puerto MySQL/Aurora en las reglas de entrada (3306).</li> </ul> </li> <li> <p>Contenido:</p> <ul> <li> <p><code>ansible</code>: </p> <ul> <li><code>deploy_backend.yml</code></li> <li><code>deploy_wordpress.yml</code></li> <li><code>install_backend.yml</code></li> <li><code>install_balancer.yml</code></li> <li><code>install_cerbot.yml</code></li> <li><code>install_frontend.yml</code></li> <li><code>install_nfs_client.yml</code></li> <li><code>install_nfs.yml</code></li> <li><code>inventario</code></li> <li><code>main.yml</code></li> <li><code>variables.yml</code></li> </ul> </li> <li> <p><code>balancer-conf</code></p> <ul> <li><code>000-default.conf</code></li> </ul> </li> <li> <p><code>conf</code></p> <ul> <li><code>000-default.conf</code></li> <li><code>dir.conf</code></li> <li><code>exports</code></li> </ul> </li> <li> <p><code>scripts</code>:</p> <ul> <li><code>deploy_backend.sh</code></li> <li><code>deploy_wordpress.sh</code></li> <li><code>install_backend.sh</code></li> <li><code>install_balancer.sh</code></li> <li><code>install_cerbot.sh</code></li> <li><code>install_frontend.sh</code></li> <li><code>install_nfs_client.sh</code></li> <li><code>install_nfs.sh</code></li> <li><code>variables.sh</code></li> </ul> </li> </ul> </li> </ul>"}]}